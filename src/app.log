2025-03-13 10:14:48,448 - selector_events.py:54 - DEBUG - Using selector: EpollSelector
2025-03-13 10:14:48,490 - connectionpool.py:1053 - DEBUG - Starting new HTTPS connection (1): api.github.com:443
2025-03-13 10:14:49,112 - connectionpool.py:547 - DEBUG - https://api.github.com:443 "GET /repos/exampler0906/ai_reviewer/pulls/2?per_page=100 HTTP/1.1" 200 None
2025-03-13 10:14:49,114 - github_assistant.py:82 - DEBUG - {"event": "API success response:{'url': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/2', 'id': 2384139673, 'node_id': 'PR_kwDOOGhMvs6OGxWZ', 'html_url': 'https://github.com/exampler0906/ai_reviewer/pull/2', 'diff_url': 'https://github.com/exampler0906/ai_reviewer/pull/2.diff', 'patch_url': 'https://github.com/exampler0906/ai_reviewer/pull/2.patch', 'issue_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/2', 'number': 2, 'state': 'open', 'locked': False, 'title': '功能测试', 'user': {'login': 'exampler0906', 'id': 62377054, 'node_id': 'MDQ6VXNlcjYyMzc3MDU0', 'avatar_url': 'https://avatars.githubusercontent.com/u/62377054?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/exampler0906', 'html_url': 'https://github.com/exampler0906', 'followers_url': 'https://api.github.com/users/exampler0906/followers', 'following_url': 'https://api.github.com/users/exampler0906/following{/other_user}', 'gists_url': 'https://api.github.com/users/exampler0906/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/exampler0906/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/exampler0906/subscriptions', 'organizations_url': 'https://api.github.com/users/exampler0906/orgs', 'repos_url': 'https://api.github.com/users/exampler0906/repos', 'events_url': 'https://api.github.com/users/exampler0906/events{/privacy}', 'received_events_url': 'https://api.github.com/users/exampler0906/received_events', 'type': 'User', 'user_view_type': 'public', 'site_admin': False}, 'body': None, 'created_at': '2025-03-11T07:17:57Z', 'updated_at': '2025-03-11T08:26:58Z', 'closed_at': None, 'merged_at': None, 'merge_commit_sha': '2ffa10d50d2e23019565c8062074b6e914619178', 'assignee': None, 'assignees': [], 'requested_reviewers': [], 'requested_teams': [], 'labels': [], 'milestone': None, 'draft': False, 'commits_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/2/commits', 'review_comments_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/2/comments', 'review_comment_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/comments{/number}', 'comments_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/2/comments', 'statuses_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/statuses/f60de9ac4a69132de86d224820d50455b5e0ea76', 'head': {'label': 'exampler0906:code_branch', 'ref': 'code_branch', 'sha': 'f60de9ac4a69132de86d224820d50455b5e0ea76', 'user': {'login': 'exampler0906', 'id': 62377054, 'node_id': 'MDQ6VXNlcjYyMzc3MDU0', 'avatar_url': 'https://avatars.githubusercontent.com/u/62377054?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/exampler0906', 'html_url': 'https://github.com/exampler0906', 'followers_url': 'https://api.github.com/users/exampler0906/followers', 'following_url': 'https://api.github.com/users/exampler0906/following{/other_user}', 'gists_url': 'https://api.github.com/users/exampler0906/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/exampler0906/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/exampler0906/subscriptions', 'organizations_url': 'https://api.github.com/users/exampler0906/orgs', 'repos_url': 'https://api.github.com/users/exampler0906/repos', 'events_url': 'https://api.github.com/users/exampler0906/events{/privacy}', 'received_events_url': 'https://api.github.com/users/exampler0906/received_events', 'type': 'User', 'user_view_type': 'public', 'site_admin': False}, 'repo': {'id': 946359486, 'node_id': 'R_kgDOOGhMvg', 'name': 'ai_reviewer', 'full_name': 'exampler0906/ai_reviewer', 'private': False, 'owner': {'login': 'exampler0906', 'id': 62377054, 'node_id': 'MDQ6VXNlcjYyMzc3MDU0', 'avatar_url': 'https://avatars.githubusercontent.com/u/62377054?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/exampler0906', 'html_url': 'https://github.com/exampler0906', 'followers_url': 'https://api.github.com/users/exampler0906/followers', 'following_url': 'https://api.github.com/users/exampler0906/following{/other_user}', 'gists_url': 'https://api.github.com/users/exampler0906/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/exampler0906/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/exampler0906/subscriptions', 'organizations_url': 'https://api.github.com/users/exampler0906/orgs', 'repos_url': 'https://api.github.com/users/exampler0906/repos', 'events_url': 'https://api.github.com/users/exampler0906/events{/privacy}', 'received_events_url': 'https://api.github.com/users/exampler0906/received_events', 'type': 'User', 'user_view_type': 'public', 'site_admin': False}, 'html_url': 'https://github.com/exampler0906/ai_reviewer', 'description': 'A LLM-based automated code review tool.', 'fork': False, 'url': 'https://api.github.com/repos/exampler0906/ai_reviewer', 'forks_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/forks', 'keys_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/keys{/key_id}', 'collaborators_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/collaborators{/collaborator}', 'teams_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/teams', 'hooks_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/hooks', 'issue_events_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/events{/number}', 'events_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/events', 'assignees_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/assignees{/user}', 'branches_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/branches{/branch}', 'tags_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/tags', 'blobs_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/blobs{/sha}', 'git_tags_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/tags{/sha}', 'git_refs_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/refs{/sha}', 'trees_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/trees{/sha}', 'statuses_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/statuses/{sha}', 'languages_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/languages', 'stargazers_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/stargazers', 'contributors_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contributors', 'subscribers_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/subscribers', 'subscription_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/subscription', 'commits_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/commits{/sha}', 'git_commits_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/commits{/sha}', 'comments_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/comments{/number}', 'issue_comment_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/comments{/number}', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/{+path}', 'compare_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/compare/{base}...{head}', 'merges_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/merges', 'archive_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/{archive_format}{/ref}', 'downloads_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/downloads', 'issues_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues{/number}', 'pulls_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls{/number}', 'milestones_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/milestones{/number}', 'notifications_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/notifications{?since,all,participating}', 'labels_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/labels{/name}', 'releases_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/releases{/id}', 'deployments_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/deployments', 'created_at': '2025-03-11T02:40:14Z', 'updated_at': '2025-03-11T02:40:18Z', 'pushed_at': '2025-03-11T07:56:28Z', 'git_url': 'git://github.com/exampler0906/ai_reviewer.git', 'ssh_url': 'git@github.com:exampler0906/ai_reviewer.git', 'clone_url': 'https://github.com/exampler0906/ai_reviewer.git', 'svn_url': 'https://github.com/exampler0906/ai_reviewer', 'homepage': None, 'size': 26, 'stargazers_count': 0, 'watchers_count': 0, 'language': None, 'has_issues': True, 'has_projects': True, 'has_downloads': True, 'has_wiki': True, 'has_pages': False, 'has_discussions': False, 'forks_count': 0, 'mirror_url': None, 'archived': False, 'disabled': False, 'open_issues_count': 1, 'license': {'key': 'mit', 'name': 'MIT License', 'spdx_id': 'MIT', 'url': 'https://api.github.com/licenses/mit', 'node_id': 'MDc6TGljZW5zZTEz'}, 'allow_forking': True, 'is_template': False, 'web_commit_signoff_required': False, 'topics': [], 'visibility': 'public', 'forks': 0, 'open_issues': 1, 'watchers': 0, 'default_branch': 'main'}}, 'base': {'label': 'exampler0906:main', 'ref': 'main', 'sha': 'e0e5938648ebb7680616d9462bc2370fe5b30bcf', 'user': {'login': 'exampler0906', 'id': 62377054, 'node_id': 'MDQ6VXNlcjYyMzc3MDU0', 'avatar_url': 'https://avatars.githubusercontent.com/u/62377054?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/exampler0906', 'html_url': 'https://github.com/exampler0906', 'followers_url': 'https://api.github.com/users/exampler0906/followers', 'following_url': 'https://api.github.com/users/exampler0906/following{/other_user}', 'gists_url': 'https://api.github.com/users/exampler0906/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/exampler0906/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/exampler0906/subscriptions', 'organizations_url': 'https://api.github.com/users/exampler0906/orgs', 'repos_url': 'https://api.github.com/users/exampler0906/repos', 'events_url': 'https://api.github.com/users/exampler0906/events{/privacy}', 'received_events_url': 'https://api.github.com/users/exampler0906/received_events', 'type': 'User', 'user_view_type': 'public', 'site_admin': False}, 'repo': {'id': 946359486, 'node_id': 'R_kgDOOGhMvg', 'name': 'ai_reviewer', 'full_name': 'exampler0906/ai_reviewer', 'private': False, 'owner': {'login': 'exampler0906', 'id': 62377054, 'node_id': 'MDQ6VXNlcjYyMzc3MDU0', 'avatar_url': 'https://avatars.githubusercontent.com/u/62377054?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/exampler0906', 'html_url': 'https://github.com/exampler0906', 'followers_url': 'https://api.github.com/users/exampler0906/followers', 'following_url': 'https://api.github.com/users/exampler0906/following{/other_user}', 'gists_url': 'https://api.github.com/users/exampler0906/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/exampler0906/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/exampler0906/subscriptions', 'organizations_url': 'https://api.github.com/users/exampler0906/orgs', 'repos_url': 'https://api.github.com/users/exampler0906/repos', 'events_url': 'https://api.github.com/users/exampler0906/events{/privacy}', 'received_events_url': 'https://api.github.com/users/exampler0906/received_events', 'type': 'User', 'user_view_type': 'public', 'site_admin': False}, 'html_url': 'https://github.com/exampler0906/ai_reviewer', 'description': 'A LLM-based automated code review tool.', 'fork': False, 'url': 'https://api.github.com/repos/exampler0906/ai_reviewer', 'forks_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/forks', 'keys_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/keys{/key_id}', 'collaborators_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/collaborators{/collaborator}', 'teams_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/teams', 'hooks_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/hooks', 'issue_events_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/events{/number}', 'events_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/events', 'assignees_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/assignees{/user}', 'branches_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/branches{/branch}', 'tags_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/tags', 'blobs_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/blobs{/sha}', 'git_tags_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/tags{/sha}', 'git_refs_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/refs{/sha}', 'trees_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/trees{/sha}', 'statuses_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/statuses/{sha}', 'languages_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/languages', 'stargazers_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/stargazers', 'contributors_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contributors', 'subscribers_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/subscribers', 'subscription_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/subscription', 'commits_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/commits{/sha}', 'git_commits_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/git/commits{/sha}', 'comments_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/comments{/number}', 'issue_comment_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/comments{/number}', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/{+path}', 'compare_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/compare/{base}...{head}', 'merges_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/merges', 'archive_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/{archive_format}{/ref}', 'downloads_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/downloads', 'issues_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues{/number}', 'pulls_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls{/number}', 'milestones_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/milestones{/number}', 'notifications_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/notifications{?since,all,participating}', 'labels_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/labels{/name}', 'releases_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/releases{/id}', 'deployments_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/deployments', 'created_at': '2025-03-11T02:40:14Z', 'updated_at': '2025-03-11T02:40:18Z', 'pushed_at': '2025-03-11T07:56:28Z', 'git_url': 'git://github.com/exampler0906/ai_reviewer.git', 'ssh_url': 'git@github.com:exampler0906/ai_reviewer.git', 'clone_url': 'https://github.com/exampler0906/ai_reviewer.git', 'svn_url': 'https://github.com/exampler0906/ai_reviewer', 'homepage': None, 'size': 26, 'stargazers_count': 0, 'watchers_count': 0, 'language': None, 'has_issues': True, 'has_projects': True, 'has_downloads': True, 'has_wiki': True, 'has_pages': False, 'has_discussions': False, 'forks_count': 0, 'mirror_url': None, 'archived': False, 'disabled': False, 'open_issues_count': 1, 'license': {'key': 'mit', 'name': 'MIT License', 'spdx_id': 'MIT', 'url': 'https://api.github.com/licenses/mit', 'node_id': 'MDc6TGljZW5zZTEz'}, 'allow_forking': True, 'is_template': False, 'web_commit_signoff_required': False, 'topics': [], 'visibility': 'public', 'forks': 0, 'open_issues': 1, 'watchers': 0, 'default_branch': 'main'}}, '_links': {'self': {'href': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/2'}, 'html': {'href': 'https://github.com/exampler0906/ai_reviewer/pull/2'}, 'issue': {'href': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/2'}, 'comments': {'href': 'https://api.github.com/repos/exampler0906/ai_reviewer/issues/2/comments'}, 'review_comments': {'href': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/2/comments'}, 'review_comment': {'href': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/comments{/number}'}, 'commits': {'href': 'https://api.github.com/repos/exampler0906/ai_reviewer/pulls/2/commits'}, 'statuses': {'href': 'https://api.github.com/repos/exampler0906/ai_reviewer/statuses/f60de9ac4a69132de86d224820d50455b5e0ea76'}}, 'author_association': 'OWNER', 'auto_merge': None, 'active_lock_reason': None, 'merged': False, 'mergeable': True, 'rebaseable': True, 'mergeable_state': 'clean', 'merged_by': None, 'comments': 0, 'review_comments': 21, 'maintainer_can_modify': False, 'commits': 16, 'additions': 415, 'deletions': 0, 'changed_files': 7}", "timestamp": "2025-03-13T02:14:49.113994Z", "filename": "github_assistant.py", "lineno": 82}
2025-03-13 10:14:49,119 - connectionpool.py:1053 - DEBUG - Starting new HTTPS connection (1): api.github.com:443
2025-03-13 10:14:49,655 - connectionpool.py:547 - DEBUG - https://api.github.com:443 "GET /repos/exampler0906/ai_reviewer/pulls/2/files?per_page=100 HTTP/1.1" 200 None
2025-03-13 10:14:49,657 - github_assistant.py:82 - DEBUG - {"event": "API success response:[{'sha': '7215e7fdea3479d1668b9c48849145e12a0ed9d4', 'filename': '.github/workflows/code_review.yml', 'status': 'added', 'additions': 45, 'deletions': 0, 'changes': 45, 'blob_url': 'https://github.com/exampler0906/ai_reviewer/blob/f60de9ac4a69132de86d224820d50455b5e0ea76/.github%2Fworkflows%2Fcode_review.yml', 'raw_url': 'https://github.com/exampler0906/ai_reviewer/raw/f60de9ac4a69132de86d224820d50455b5e0ea76/.github%2Fworkflows%2Fcode_review.yml', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/.github%2Fworkflows%2Fcode_review.yml?ref=f60de9ac4a69132de86d224820d50455b5e0ea76', 'patch': \"@@ -0,0 +1,45 @@\\n+name: Code Review\\n+\\n+on:\\n+  pull_request:\\n+    types: [opened, synchronize, reopened]  # 触发条件：PR 创建/更新/重新打开\\n+\\n+jobs:\\n+  code_review:\\n+    runs-on: ubuntu-latest\\n+\\n+    steps:\\n+      - name: Checkout PR branch\\n+        uses: actions/checkout@v4\\n+        with:\\n+          ref: ${{ github.event.pull_request.head.ref }}  # 获取 PR 的源分支\\n+\\n+      - name: Set Python Version\\n+        uses: actions/setup-python@v5\\n+        with:\\n+          python-version: '3.11.7'\\n+\\n+      - name: Set Pip Cache\\n+        uses: actions/cache@v3\\n+        with:\\n+          path: ~/.cache/pip\\n+          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}\\n+          restore-keys: |\\n+            ${{ runner.os }}-pip-\\n+\\n+      - name: Install Requirement\\n+        run: |\\n+          python -m pip install --upgrade pip\\n+          pip install -r requirements.txt\\n+\\n+      - name: Code Review\\n+        env:\\n+            LLM_API_KEY: ${{ secrets.LLM_API_KEY }}\\n+            LLM_API_URL: ${{ secrets.LLM_API_URL }}\\n+            GITHUB_TOKEN: ${{ secrets.THIS_GITHUB_TOKEN }}\\n+            REPOSITORY_NAME: ${{ secrets.REPOSITORY_NAME }}\\n+            REPOSITORY_OWNER: ${{ secrets.REPOSITORY_OWNER }}\\n+        run: |\\n+          cd src\\n+          python ai_code_reviewer.py ${{ github.event.pull_request.number }}\\n+          cat app.log\"}, {'sha': '785de2d27faad9434676bcc61c92555f4f1fd74d', 'filename': 'requirements.txt', 'status': 'added', 'additions': 6, 'deletions': 0, 'changes': 6, 'blob_url': 'https://github.com/exampler0906/ai_reviewer/blob/f60de9ac4a69132de86d224820d50455b5e0ea76/requirements.txt', 'raw_url': 'https://github.com/exampler0906/ai_reviewer/raw/f60de9ac4a69132de86d224820d50455b5e0ea76/requirements.txt', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/requirements.txt?ref=f60de9ac4a69132de86d224820d50455b5e0ea76', 'patch': '@@ -0,0 +1,6 @@\\n+tree-sitter==0.24.0\\n+tree-sitter-cpp==0.23.4\\n+tree-sitter-python==0.23.6\\n+structlog==25.1.0\\n+httpx==0.28.1\\n+requests==2.31.0\\n\\\\ No newline at end of file'}, {'sha': 'a6330f202af2980b1c654806858d2e71108a51e6', 'filename': 'src/ai_code_reviewer.py', 'status': 'added', 'additions': 167, 'deletions': 0, 'changes': 167, 'blob_url': 'https://github.com/exampler0906/ai_reviewer/blob/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fai_code_reviewer.py', 'raw_url': 'https://github.com/exampler0906/ai_reviewer/raw/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fai_code_reviewer.py', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/src%2Fai_code_reviewer.py?ref=f60de9ac4a69132de86d224820d50455b5e0ea76', 'patch': '@@ -0,0 +1,167 @@\\n+from tree_sitter import Language, Parser\\n+from ai_code_reviewer_logger import logger\\n+from ai_module import DeepSeek\\n+from github_assistant import GithubAssistant\\n+from exception import LogError, EnvironmentVariableError, AiCodeReviewerException\\n+import tree_sitter_cpp\\n+import tree_sitter_python\\n+import json\\n+import argparse\\n+import os\\n+import asyncio\\n+\\n+\\n+# 获取代码内容\\n+def read_file(file_path, mode=\"read\"):\\n+    try:\\n+        with open(file_path, \"r\", encoding=\"utf-8\") as file:\\n+            if mode == \"read\":\\n+                return file.read()\\n+            elif mode == \"lines\":\\n+                return (line for line in file)  # 生成器减少内存占用\\n+    except FileNotFoundError:\\n+        raise FileNotFoundError(f\"文件不存在: {file_path}\")\\n+    except PermissionError:\\n+        raise PermissionError(f\"无权限访问文件: {file_path}\")\\n+    except UnicodeDecodeError as e:\\n+        raise ValueError(f\"文件编码错误: {e}\") from e\\n+\\n+\\n+class CppCodeAnalyzer:\\n+    def __init__(self, pull_request_id):\\n+        # 校验日志模块是否正常启动\\n+        if logger == None:\\n+            raise LogError(2)\\n+\\n+        # 配置文件检查   \\n+        def environment_variable_check(variable):\\n+            if isinstance(variable, str):\\n+                value = os.environ.get(variable)\\n+                if value is None:\\n+                    raise EnvironmentVariableError(f\"环境变量{variable}未设置\", 3)\\n+                return value\\n+            else:\\n+                error_type = type(variable)\\n+                raise AiCodeReviewerException(f\"变量类型错误:{error_type}\", 4)\\n+        \\n+        # llm_api_key 和 github_token 需要从环境变量中拿取\\n+        llm_api_key = environment_variable_check(\"LLM_API_KEY\")\\n+        llm_api_url = environment_variable_check(\"LLM_API_URL\")\\n+        github_token = environment_variable_check(\"GITHUB_TOKEN\")\\n+        repository_name = environment_variable_check(\"REPOSITORY_NAME\")\\n+        repository_owner = environment_variable_check(\"REPOSITORY_OWNER\")\\n+        \\n+        # 初始化ai模型(目前只支持deepseek)\\n+        self.ai_module = DeepSeek(llm_api_url, llm_api_key)\\n+        \\n+        # 初始化github assistant\\n+        self.github_assistant = GithubAssistant(github_token, \\n+                                                repository_owner, \\n+                                                repository_name, pull_request_id)\\n+\\n+        self._cpp_parser = None\\n+        self._py_parser = None\\n+        self.code_lines = []\\n+\\n+    \\n+    @property\\n+    def cpp_parser(self) -> Parser:\\n+        if not self._cpp_parser:\\n+            self._cpp_parser = Parser(Language(tree_sitter_cpp.language()))\\n+        return self._cpp_parser\\n+\\n+    \\n+    @property\\n+    def py_parser(self) -> Parser:\\n+        if not self._py_parser:\\n+            self._py_parser = Parser(Language(tree_sitter_python.language()))\\n+        return self._py_parser\\n+        \\n+    \\n+    \\n+\\n+\\n+    async def find_functions(self, node, lines, file_name):\\n+        # 获取文件变更列表行数，方便后续滤重\\n+        self.code_lines = lines\\n+        self.code_lines.sort()\\n+\\n+        # 检查当前节点是否为函数定义\\n+        if node.type == \"function_definition\":\\n+            # 获取函数的开始和结束行\\n+            func_start_line = node.start_point[0] + 1  # start_point 是 (行, 列)，索引从 0 开始\\n+            func_end_line = node.end_point[0] + 1\\n+\\n+            # 如果函数的某些行号在我们关心的 `lines` 列表中\\n+            is_processed = False\\n+            for line in self.code_lines:\\n+                if func_start_line <= line <= func_end_line:\\n+                    if is_processed:\\n+                        # 移除已经处理后的代码行，提高性能\\n+                        self.code_lines.remove(line)\\n+                        continue\\n+                    \\n+                    # 将当前函数的处理flag标记为true\\n+                    is_processed = True\\n+\\n+                    # 获取函数体并打印\\n+                    function_body = self.extract_function_body(node)\\n+                    response = await self.ai_module.call_ai_module(function_body)\\n+\\n+                    # 添加修改意见到评论\\n+                    self.github_assistant.add_comment(file_name, func_start_line, response)\\n+\\n+                    # 移除已经处理后的代码行，提高性能\\n+                    self.code_lines.remove(line)\\n+                \\n+        # 递归地遍历子节点\\n+        for child in node.children:\\n+            await self.find_functions(child, lines, file_name)\\n+    \\n+\\n+    # FIXME: 提取逻辑需要进一步优化\\n+    def extract_function_body(self, node):\\n+        \"\"\" 提取函数体的代码内容 \"\"\"\\n+        function_body = []        \\n+        # 递归遍历子节点，提取函数体的语法内容\\n+        for child in node.children:\\n+            function_body.append(child.text.decode(\"utf-8\"))\\n+        \\n+        return \"\\\\n\".join(function_body)\\n+\\n+\\n+    async def analyze_code(self, diff_file_struct_list):\\n+        for diff_file_struct in diff_file_struct_list:\\n+\\n+            # 进行文件过滤\\n+            file_name = diff_file_struct.file_name\\n+            if file_name.endswith(\".cpp\") or file_name.endswith(\".h\") or file_name.endswith(\".hpp\") or file_name.endswith(\".tpp\"):\\n+                # 解析 C++ 代码\\n+                cpp_code = read_file(diff_file_struct.file_name)\\n+                tree = self.cpp_parser.parse(bytes(cpp_code, \"utf8\"))\\n+                # 获取根节点\\n+                root_node = tree.root_node\\n+                # 开始遍历 AST\\n+                await self.find_functions(root_node, diff_file_struct.diff_position, diff_file_struct.file_name)\\n+            elif file_name.endswith(\".py\"):\\n+                py_code = read_file(diff_file_struct.file_name)\\n+                tree = self.py_parser.parse(bytes(py_code, \"utf8\"))         \\n+                # 获取根节点\\n+                root_node = tree.root_node\\n+                # 开始遍历 AST\\n+                await self.find_functions(root_node, diff_file_struct.diff_position, diff_file_struct.file_name)\\n+\\n+\\n+def main():\\n+    # 命令行参数将解析\\n+    parser = argparse.ArgumentParser(description=\"使用帮助\")\\n+    parser.add_argument(\"pull_request_id\", type=int, help=\"合并请求id（必填）\")\\n+    args = parser.parse_args()\\n+    \\n+    code_analyzer = CppCodeAnalyzer(args.pull_request_id)\\n+    diff_file_struct_list = code_analyzer.github_assistant.get_diff_file_structs()\\n+    asyncio.run(code_analyzer.analyze_code(diff_file_struct_list))\\n+\\n+\\n+if __name__ == \"__main__\":\\n+    main()\\n\\\\ No newline at end of file'}, {'sha': '0974044bd35589bdf1cbd19e5a3cbf9bf5ab5be7', 'filename': 'src/ai_code_reviewer_logger.py', 'status': 'added', 'additions': 41, 'deletions': 0, 'changes': 41, 'blob_url': 'https://github.com/exampler0906/ai_reviewer/blob/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fai_code_reviewer_logger.py', 'raw_url': 'https://github.com/exampler0906/ai_reviewer/raw/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fai_code_reviewer_logger.py', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/src%2Fai_code_reviewer_logger.py?ref=f60de9ac4a69132de86d224820d50455b5e0ea76', 'patch': '@@ -0,0 +1,41 @@\\n+# logger.py\\n+import sys\\n+import logging\\n+import structlog\\n+\\n+# 配置文件日志 Handler（记录 DEBUG 及以上）\\n+file_handler = logging.FileHandler(\"app.log\", mode=\"w\")\\n+file_handler.setLevel(logging.DEBUG)  # 记录所有日志\\n+file_handler.setFormatter(logging.Formatter(\\n+    \"%(asctime)s - %(filename)s:%(lineno)d - %(levelname)s - %(message)s\"\\n+))\\n+\\n+# 配置终端日志 Handler（记录 INFO 及以上）\\n+console_handler = logging.StreamHandler(sys.stdout)\\n+console_handler.setLevel(logging.INFO)  # 只记录 INFO 及以上\\n+console_handler.setFormatter(logging.Formatter(\\n+    \"%(asctime)s - %(filename)s:%(lineno)d - %(levelname)s - %(message)s\"\\n+))\\n+\\n+# 配置 logging 适配 structlog\\n+logging.basicConfig(\\n+    level=logging.DEBUG,  # 全局最低日志级别\\n+    handlers=[file_handler, console_handler],  # 添加两个 Handler\\n+)\\n+\\n+# 让 structlog 适配 logging\\n+structlog.configure(\\n+    processors=[\\n+        structlog.processors.TimeStamper(fmt=\"iso\"),\\n+        structlog.processors.CallsiteParameterAdder(\\n+            [structlog.processors.CallsiteParameter.FILENAME,\\n+             structlog.processors.CallsiteParameter.LINENO]\\n+        ),\\n+        structlog.processors.JSONRenderer(ensure_ascii=False),\\n+    ],\\n+    wrapper_class=structlog.make_filtering_bound_logger(logging.DEBUG),\\n+    logger_factory=structlog.stdlib.LoggerFactory(),\\n+)\\n+\\n+# 创建全局 logger ---\\n+logger = structlog.get_logger(\"global_logger\")\\n\\\\ No newline at end of file'}, {'sha': '1d37d6ab6d6f79a931d5d020f0bd0a629e086650', 'filename': 'src/ai_module.py', 'status': 'added', 'additions': 44, 'deletions': 0, 'changes': 44, 'blob_url': 'https://github.com/exampler0906/ai_reviewer/blob/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fai_module.py', 'raw_url': 'https://github.com/exampler0906/ai_reviewer/raw/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fai_module.py', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/src%2Fai_module.py?ref=f60de9ac4a69132de86d224820d50455b5e0ea76', 'patch': '@@ -0,0 +1,44 @@\\n+import httpx\\n+from ai_code_reviewer_logger import logger\\n+\\n+class DeepSeek:\\n+    def __init__(self, url, key):\\n+        self.api_url  = url\\n+        self.api_key = key\\n+\\n+\\n+    async def call_deepseek_async(self, prompt: str):\\n+        \"\"\" 异步调用 DeepSeek API 并返回结果 \"\"\"\\n+        headers = {\\n+            \"Authorization\": f\"Bearer {self.api_key}\",\\n+            \"Content-Type\": \"application/json\"\\n+        }\\n+        \\n+        payload = {\\n+            \"model\": \"deepseek-r1-250120\",  # 选择模型\\n+            \"messages\": [{\"role\": \"user\", \"content\": prompt}]\\n+        }\\n+\\n+        async with httpx.AsyncClient(trust_env=False, proxy=None, timeout=1000) as client:\\n+            response = await client.post(self.api_url, json=payload, headers=headers)\\n+            response_json = response.json()\\n+        return response_json\\n+\\n+\\n+    async def call_ai_module(self, code_content):\\n+        #主函数，调用 DeepSeek 并输出结果\\n+        code_content =  \"\"\"你是一名经验丰富的计算机工程师，请从专业的角度，对以下代码进行review，对于不完善的地方，请提出针对性的优化建议。\\n+                            在给出意见时请保持语言的简洁，并对内存泄漏、性能优化、错误处理三个方面进行重点检查。\\n+                            另外，提交给你的函数都是一个独立的个体，无需进行关联推导。\\n+                            最后，根据你的修改建议给出一个完整的示例代码\\\\n\"\"\" + code_content\\n+        \\n+        logger.debug(f\"Request content:{code_content}\")\\n+        response = await self.call_deepseek_async(code_content)\\n+\\n+        if \"choices\" in response and response[\"choices\"]:\\n+            response_str = response[\"choices\"][0][\"message\"][\"content\"]\\n+            logger.debug(f\"DeepSeek Response:{response_str}\")\\n+            return response_str\\n+        else:\\n+            logger.debug(f\"Error in DeepSeek API Response:{response}\")\\n+            return response'}, {'sha': 'cb23200b435dffc2045a0b45f3c55b5122f11132', 'filename': 'src/exception.py', 'status': 'added', 'additions': 21, 'deletions': 0, 'changes': 21, 'blob_url': 'https://github.com/exampler0906/ai_reviewer/blob/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fexception.py', 'raw_url': 'https://github.com/exampler0906/ai_reviewer/raw/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fexception.py', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/src%2Fexception.py?ref=f60de9ac4a69132de86d224820d50455b5e0ea76', 'patch': '@@ -0,0 +1,21 @@\\n+class AiCodeReviewerException(Exception):\\n+    \\n+    # 自定义异常基类\\n+    def __init__(self, message, error_code=1):\\n+        self.message = message\\n+        self.error_code = error_code\\n+        super().__init__(message)\\n+\\n+    def __str__(self):\\n+        return f\"[Error {self.error_code}]: {self.message}\"\\n+    \\n+\\n+class LogError(AiCodeReviewerException):\\n+    def __init__(self, error_code):\\n+        if error_code == 2:\\n+            super().__init__(f\"日志模块初始化错误\",error_code)\\n+        \\n+\\n+class EnvironmentVariableError(AiCodeReviewerException):\\n+    def __init__(self, message, error_code):\\n+        super().__init__(message, error_code)\\n\\\\ No newline at end of file'}, {'sha': '9dee7ded72706ad9606302c8ce26713ab2d13ac2', 'filename': 'src/github_assistant.py', 'status': 'added', 'additions': 91, 'deletions': 0, 'changes': 91, 'blob_url': 'https://github.com/exampler0906/ai_reviewer/blob/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fgithub_assistant.py', 'raw_url': 'https://github.com/exampler0906/ai_reviewer/raw/f60de9ac4a69132de86d224820d50455b5e0ea76/src%2Fgithub_assistant.py', 'contents_url': 'https://api.github.com/repos/exampler0906/ai_reviewer/contents/src%2Fgithub_assistant.py?ref=f60de9ac4a69132de86d224820d50455b5e0ea76', 'patch': '@@ -0,0 +1,91 @@\\n+import requests\\n+import os\\n+from ai_code_reviewer_logger import logger\\n+from dataclasses import dataclass\\n+\\n+@dataclass\\n+class DiffFileStruct:\\n+    file_name: str\\n+    diff_position: list\\n+\\n+\\n+class GithubAssistant:\\n+    def __init__(self, github_token, repository_owner, repository_name, pull_request_id):\\n+        self.github_token = github_token\\n+        self.owner = repository_owner\\n+        self.repo = repository_name\\n+        self.pull_request_id = pull_request_id\\n+\\n+\\n+    def get_pr_change_files(self):\\n+        # 发送请求获取 PR 文件变更信息\\n+        headers = {\\n+            \"Authorization\": f\"token {self.github_token}\",\\n+            \"Accept\": \"application/vnd.github.v3+json\"\\n+        }\\n+        url = f\"https://api.github.com/repos/{self.owner}/{self.repo}/pulls/{self.pull_request_id}/files\"\\n+        response = requests.get(url, headers=headers)\\n+        logger.debug(f\"Get File Change Response:{response.json()}\")\\n+        files = response.json()\\n+\\n+        return files\\n+\\n+\\n+    # 解析 patch 并找到需要评论的位置\\n+    def get_comment_positions(self, patch):\\n+        positions = []\\n+        patch_lines = patch.split(\"\\\\n\")\\n+        position = 0  # GitHub 的 diff 行索引\\n+\\n+        for line in patch_lines:\\n+            if not line.startswith(\\'@@\\'):  # 跳过 diff 头部信息\\n+                position += 1\\n+            if (line.startswith(\"+\") and not line.startswith(\"+++\")) or (line.startswith(\"-\") and not line.startswith(\"---\")):# 考虑新增的行和删除的行\\n+                positions.append(position)\\n+        return positions\\n+    \\n+\\n+    # 发送评论\\n+    def add_comment(self, filename, position, comment_text):\\n+        \\n+        # 文件路径需要重新处理\\n+        repository_name = os.environ.get(\"REPOSITORY_NAME\")\\n+        real_file_name = filename.replace(f\"../../{repository_name}/\", \"\", 1)\\n+        \\n+        # 获取 PR 的 commit ID\\n+        headers = {\\n+            \"Authorization\": f\"token {self.github_token}\",\\n+            \"Accept\": \"application/vnd.github.v3+json\"\\n+        }\\n+        pr_url = f\"https://api.github.com/repos/{self.owner}/{self.repo}/pulls/{self.pull_request_id}\"\\n+        pr_data = requests.get(pr_url, headers=headers).json()\\n+        COMMIT_ID = pr_data[\"head\"][\"sha\"]\\n+\\n+        comment_url = f\"https://api.github.com/repos/{self.owner}/{self.repo}/pulls/{self.pull_request_id}/comments\"\\n+        payload = {\\n+            \"body\": comment_text,\\n+            \"commit_id\": COMMIT_ID,  # PR 的最新 commit SHA (需提前获取)\\n+            \"path\": real_file_name,\\n+            \"position\": position\\n+        }\\n+        \\n+        response = requests.post(comment_url, headers=headers, json=payload)\\n+        logger.debug(f\"Add Comment Response:{response.json()}\")\\n+        return response.json()\\n+\\n+    \\n+    def get_diff_file_structs(self):\\n+        # 遍历所有文件并添加评论\\n+        files = self.get_pr_change_files()\\n+        diff_file_struct_list = []\\n+        repository_name = os.environ.get(\"REPOSITORY_NAME\")\\n+        \\n+        for file in files:\\n+            filename = file[\"filename\"]\\n+            filename = f\"../../{repository_name}/{filename}\"\\n+            patch = file.get(\"patch\", \"\")\\n+            positions = self.get_comment_positions(patch)\\n+\\n+            diff_file_struct_list.append(DiffFileStruct(filename, positions)) \\n+\\n+        return diff_file_struct_list\\n\\\\ No newline at end of file'}]", "timestamp": "2025-03-13T02:14:49.656836Z", "filename": "github_assistant.py", "lineno": 82}
2025-03-13 10:14:49,661 - base_events.py:1917 - WARNING - Executing <Task pending name='Task-1' coro=<async_main() running at /home/zwp/work_code/ai_reviewer/src/ai_code_reviewer.py:218> wait_for=<_GatheringFuture pending cb=[Task.task_wakeup()] created at /home/zwp/anaconda3/lib/python3.11/asyncio/tasks.py:709> cb=[_run_until_complete_cb() at /home/zwp/anaconda3/lib/python3.11/asyncio/base_events.py:180] created at /home/zwp/anaconda3/lib/python3.11/asyncio/runners.py:100> took 1.212 seconds
2025-03-13 10:14:49,664 - ai_code_reviewer.py:190 - ERROR - {"event": "File read error:../../ai_reviewer/src/exception.py - [Errno 2] No such file or directory: '../../ai_reviewer/src/exception.py'", "timestamp": "2025-03-13T02:14:49.664517Z", "filename": "ai_code_reviewer.py", "lineno": 190}
2025-03-13 10:14:49,666 - ai_code_reviewer.py:131 - ERROR - {"event": "AI processing failed: None", "timestamp": "2025-03-13T02:14:49.666766Z", "filename": "ai_code_reviewer.py", "lineno": 131}
2025-03-13 10:14:49,666 - ai_code_reviewer.py:194 - ERROR - {"event": "Unknow error: ../../ai_reviewer/src/ai_code_reviewer.py - None", "timestamp": "2025-03-13T02:14:49.666827Z", "filename": "ai_code_reviewer.py", "lineno": 194}
2025-03-13 10:14:49,668 - ai_code_reviewer.py:131 - ERROR - {"event": "AI processing failed: None", "timestamp": "2025-03-13T02:14:49.668603Z", "filename": "ai_code_reviewer.py", "lineno": 131}
2025-03-13 10:14:49,668 - ai_code_reviewer.py:194 - ERROR - {"event": "Unknow error: ../../ai_reviewer/src/ai_module.py - None", "timestamp": "2025-03-13T02:14:49.668782Z", "filename": "ai_code_reviewer.py", "lineno": 194}
2025-03-13 10:14:49,669 - ai_code_reviewer.py:131 - ERROR - {"event": "AI processing failed: None", "timestamp": "2025-03-13T02:14:49.669776Z", "filename": "ai_code_reviewer.py", "lineno": 131}
2025-03-13 10:14:49,669 - ai_code_reviewer.py:194 - ERROR - {"event": "Unknow error: ../../ai_reviewer/src/github_assistant.py - None", "timestamp": "2025-03-13T02:14:49.669832Z", "filename": "ai_code_reviewer.py", "lineno": 194}
2025-03-13 10:14:49,670 - ai_code_reviewer.py:221 - INFO - {"event": "review complete", "timestamp": "2025-03-13T02:14:49.669988Z", "filename": "ai_code_reviewer.py", "lineno": 221}
2025-03-13 10:14:49,674 - base_events.py:676 - DEBUG - Close <_UnixSelectorEventLoop running=False closed=False debug=True>
